Index: .gitignore
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+># === Python ===\n# Байт-код Python\n__pycache__/\n*.py[cod]\n*$py.class\n*.pyc\n\n# Дистрибутивы и build-файлы\nbuild/\ndevelop-eggs/\ndist/\ndownloads/\neggs/\n.eggs/\nlib/\nlib64/\nparts/\nsdist/\nvar/\n*.egg-info/\n.installed.cfg\n*.egg\nMANIFEST\n\n# IDE и редакторы\n.vscode/\n.idea\n*.sublime-project\n*.sublime-workspace\n*.DS_Store\n\n# Временные файлы\n*.tmp\n*.log\n*.sqlite3\n*.db\n\n# === Flask ===\n# Конфиденциальные данные\ninstance/\n.env\n.flaskenv\n*.key\n*.crt\n*.pem\n\n# Миграции (если они генерируются автоматически)\n__migrations/\n\n# Тестовые файлы\n.coverage\nhtmlcov/\n.tox/\n.nox/\n.cache/\n.pytest_cache/\n\n# Локальные настройки\nlocal_settings.py\nsettings_local.py\n\n# Зависимости\nvenv/\nENV/\nenv/\n.venv/\npip-log.txt\npip-delete-this-directory.txt\n\n# === Операционные системы ===\n# macOS\n.DS_Store\n.AppleDouble\n.LSOverride\nIcon?\n._*\n\n# Windows\nThumbs.db\nehthumbs.db\nDesktop.ini\n$RECYCLE.BIN/\n\n# Linux\n*~\n\n# === Другие ===\n# Файлы, созданные редакторами\n*.swp\n*.bak\n\n\n# Логи и базы данных\nlogs/\n*.sql\n*.sqlite\n\n# Docker\nDockerfile\ndocker-compose.yml\n.docker/\n\n\nsecret_config.py
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-16LE
===================================================================
diff --git a/.gitignore b/.gitignore
--- a/.gitignore	(revision eaaa74dff3a2ab4f38d5213ee48e23f3f27ecba2)
+++ b/.gitignore	(date 1747754056261)
@@ -1,10 +1,16 @@
 # === Python ===
 # Байт-код Python
+
 __pycache__/
-*.py[cod]
+*.py[cod]git
 *$py.class
 *.pyc
 
+social_network/app/__pycache__/
+social_network/app/instance/__pycache__/
+social_network/tests/__pycache__/
+**/__pycache__/
+
 # Дистрибутивы и build-файлы
 build/
 develop-eggs/
@@ -25,6 +31,7 @@
 # IDE и редакторы
 .vscode/
 .idea
+.idea/*
 *.sublime-project
 *.sublime-workspace
 *.DS_Store
Index: migrations/script.py.mako
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/migrations/script.py.mako b/migrations/script.py.mako
deleted file mode 100644
--- a/migrations/script.py.mako	(revision eaaa74dff3a2ab4f38d5213ee48e23f3f27ecba2)
+++ /dev/null	(revision eaaa74dff3a2ab4f38d5213ee48e23f3f27ecba2)
@@ -1,24 +0,0 @@
-"""${message}
-
-Revision ID: ${up_revision}
-Revises: ${down_revision | comma,n}
-Create Date: ${create_date}
-
-"""
-from alembic import op
-import sqlalchemy as sa
-${imports if imports else ""}
-
-# revision identifiers, used by Alembic.
-revision = ${repr(up_revision)}
-down_revision = ${repr(down_revision)}
-branch_labels = ${repr(branch_labels)}
-depends_on = ${repr(depends_on)}
-
-
-def upgrade():
-    ${upgrades if upgrades else "pass"}
-
-
-def downgrade():
-    ${downgrades if downgrades else "pass"}
Index: social_network/VoiceAssistant/app.py
===================================================================
diff --git a/social_network/VoiceAssistant/app.py b/social_network/VoiceAssistant/app.py
deleted file mode 100644
--- a/social_network/VoiceAssistant/app.py	(revision eaaa74dff3a2ab4f38d5213ee48e23f3f27ecba2)
+++ /dev/null	(revision eaaa74dff3a2ab4f38d5213ee48e23f3f27ecba2)
@@ -1,26 +0,0 @@
-# app.py
-from flask import Flask, render_template, request, jsonify, send_from_directory
-from core.assistant import AssistantCore
-
-app = Flask(__name__)
-assistant = AssistantCore()
-
-@app.route("/")
-def index():
-    return render_template("index.html")
-
-@app.route("/listen", methods=["POST"])
-def listen():
-    response, audio_filename = assistant.listen_and_respond()
-    return jsonify({
-        "text": response,
-        "audio": f"/static/audio/{audio_filename}" if audio_filename else None,
-        "history": assistant.get_history()
-    })
-
-@app.route("/static/audio/<filename>")
-def audio(filename):
-    return send_from_directory("static/audio", filename)
-
-if __name__ == "__main__":
-    app.run(debug=True)
Index: migrations/versions/d69f3387bfc2_.py
===================================================================
diff --git a/migrations/versions/d69f3387bfc2_.py b/migrations/versions/d69f3387bfc2_.py
deleted file mode 100644
--- a/migrations/versions/d69f3387bfc2_.py	(revision eaaa74dff3a2ab4f38d5213ee48e23f3f27ecba2)
+++ /dev/null	(revision eaaa74dff3a2ab4f38d5213ee48e23f3f27ecba2)
@@ -1,53 +0,0 @@
-"""empty message
-
-Revision ID: d69f3387bfc2
-Revises: 
-Create Date: 2025-04-22 18:53:45.201724
-
-"""
-from alembic import op
-import sqlalchemy as sa
-
-
-# revision identifiers, used by Alembic.
-revision = 'd69f3387bfc2'
-down_revision = None
-branch_labels = None
-depends_on = None
-
-
-def upgrade():
-    # ### commands auto generated by Alembic - please adjust! ###
-    op.create_table('user',
-    sa.Column('id', sa.Integer(), nullable=False),
-    sa.Column('username', sa.String(length=64), nullable=False),
-    sa.Column('email', sa.String(length=120), nullable=False),
-    sa.Column('phone', sa.String(length=11), nullable=False),
-    sa.Column('password_hash', sa.String(length=128), nullable=True),
-    sa.PrimaryKeyConstraint('id'),
-    sa.UniqueConstraint('email'),
-    sa.UniqueConstraint('phone'),
-    sa.UniqueConstraint('username')
-    )
-    op.create_table('message',
-    sa.Column('id', sa.Integer(), nullable=False),
-    sa.Column('text', sa.String(length=500), nullable=True),
-    sa.Column('timestamp', sa.DateTime(), nullable=True),
-    sa.Column('user_id', sa.Integer(), nullable=True),
-    sa.ForeignKeyConstraint(['user_id'], ['user.id'], ),
-    sa.PrimaryKeyConstraint('id')
-    )
-    with op.batch_alter_table('message', schema=None) as batch_op:
-        batch_op.create_index(batch_op.f('ix_message_timestamp'), ['timestamp'], unique=False)
-
-    # ### end Alembic commands ###
-
-
-def downgrade():
-    # ### commands auto generated by Alembic - please adjust! ###
-    with op.batch_alter_table('message', schema=None) as batch_op:
-        batch_op.drop_index(batch_op.f('ix_message_timestamp'))
-
-    op.drop_table('message')
-    op.drop_table('user')
-    # ### end Alembic commands ###
Index: social_network/VoiceAssistant/static/style.css
===================================================================
diff --git a/social_network/VoiceAssistant/static/style.css b/social_network/VoiceAssistant/static/style.css
deleted file mode 100644
--- a/social_network/VoiceAssistant/static/style.css	(revision eaaa74dff3a2ab4f38d5213ee48e23f3f27ecba2)
+++ /dev/null	(revision eaaa74dff3a2ab4f38d5213ee48e23f3f27ecba2)
@@ -1,46 +0,0 @@
-/* static/style.css */
-body {
-    margin: 0;
-    font-family: sans-serif;
-    background: rgba(0,0,0,0.3);
-  }
-  
-  #chat-window {
-    position: fixed;
-    bottom: 20px;
-    right: 20px;
-    width: 320px;
-    background: #fff;
-    border-radius: 12px;
-    box-shadow: 0 4px 20px rgba(0,0,0,0.2);
-    overflow: hidden;
-  }
-  
-  #chat-log {
-    max-height: 400px;
-    overflow-y: auto;
-    padding: 10px;
-  }
-  
-  #chat-log .user {
-    text-align: right;
-    margin: 5px;
-    color: blue;
-  }
-  
-  #chat-log .assistant {
-    text-align: left;
-    margin: 5px;
-    color: green;
-  }
-  
-  #activate-btn {
-    width: 100%;
-    padding: 10px;
-    border: none;
-    background: #007bff;
-    color: white;
-    font-size: 16px;
-    cursor: pointer;
-  }
-  
\ No newline at end of file
Index: social_network/VoiceAssistant/а.txt
===================================================================
diff --git a/social_network/VoiceAssistant/а.txt b/social_network/VoiceAssistant/а.txt
deleted file mode 100644
--- a/social_network/VoiceAssistant/а.txt	(revision eaaa74dff3a2ab4f38d5213ee48e23f3f27ecba2)
+++ /dev/null	(revision eaaa74dff3a2ab4f38d5213ee48e23f3f27ecba2)
@@ -1,19 +0,0 @@
-├── models/
-│   └── model/                  # Распакованная модель Vosk
-│
-├── utils/
-│   ├── downloader.py           # Скачивание модели с Google Drive
-│   ├── recognizer.py           # Распознавание речи + фильтрация шума
-│   ├── tts.py                  # Синтез речи (pyttsx3)
-│   ├── commands.py             # Обработка офлайн/онлайн команд
-│   └── history.py              # Работа с историей сеанса
-│
-├── static/
-│   └── audio/                  # Файлы синтезированной речи
-│
-├── templates/
-│   └── assistant.html          # Интерфейс ассистента (всплывающее окно)
-│
-├── frontend.js                 # JS-клиент: микрофон, отправка аудио, рендер
-├── voice.py                    # Flask Blueprint для API
-└── __init__.py                 # Инициализация ассистента
Index: social_network/VoiceAssistant/utils/history.py
===================================================================
diff --git a/social_network/VoiceAssistant/utils/history.py b/social_network/VoiceAssistant/utils/history.py
deleted file mode 100644
--- a/social_network/VoiceAssistant/utils/history.py	(revision eaaa74dff3a2ab4f38d5213ee48e23f3f27ecba2)
+++ /dev/null	(revision eaaa74dff3a2ab4f38d5213ee48e23f3f27ecba2)
@@ -1,12 +0,0 @@
-class SessionHistory:
-    def __init__(self):
-        self.dialog = []
-
-    def add_message(self, role: str, message: str):
-        self.dialog.append({"role": role, "message": message})
-
-    def get_history(self):
-        return self.dialog
-
-    def clear(self):
-        self.dialog = []
Index: social_network/VoiceAssistant/utils/commands.py
===================================================================
diff --git a/social_network/VoiceAssistant/utils/commands.py b/social_network/VoiceAssistant/utils/commands.py
deleted file mode 100644
--- a/social_network/VoiceAssistant/utils/commands.py	(revision eaaa74dff3a2ab4f38d5213ee48e23f3f27ecba2)
+++ /dev/null	(revision eaaa74dff3a2ab4f38d5213ee48e23f3f27ecba2)
@@ -1,30 +0,0 @@
-# utils/commands.py
-import webbrowser
-from utils.ai import AIResponder  # Подключим ИИ-модуль
-
-class CommandProcessor:
-    def __init__(self):
-        self.ai = AIResponder()
-
-    def process(self, query: str) -> str:
-        query = query.lower()
-
-        if query.startswith("найди "):
-            search_term = query.replace("найди", "").strip()
-            webbrowser.open(f"https://yandex.ru/search/?text={search_term}")
-            return f"Ищу в Яндексе: {search_term}"
-
-        if "открой браузер" in query:
-            webbrowser.open("https://yandex.ru")
-            return "Открываю браузер"
-
-        if "создай файл" in query:
-            with open("new_file.txt", "w") as f:
-                f.write("Файл создан голосовым помощником")
-            return "Создан новый файл"
-
-        if query in ["привет", "здравствуй", "добрый день"]:
-            return "Здравствуйте! Чем могу помочь?"
-
-        # Если ничего не подошло — пробуем ИИ
-        return self.ai.get_response(query)
Index: social_network/VoiceAssistant/utils/tts.py
===================================================================
diff --git a/social_network/VoiceAssistant/utils/tts.py b/social_network/VoiceAssistant/utils/tts.py
deleted file mode 100644
--- a/social_network/VoiceAssistant/utils/tts.py	(revision eaaa74dff3a2ab4f38d5213ee48e23f3f27ecba2)
+++ /dev/null	(revision eaaa74dff3a2ab4f38d5213ee48e23f3f27ecba2)
@@ -1,26 +0,0 @@
-import os
-import pyttsx3
-from uuid import uuid4
-
-class TextToSpeech:
-    def __init__(self):
-        self.engine = pyttsx3.init()
-        self.engine.setProperty('rate', 150)
-
-        # Установка голоса (проверка русских голосов)
-        for voice in self.engine.getProperty('voices'):
-            if 'russian' in voice.name.lower() or 'рус' in voice.name.lower():
-                self.engine.setProperty('voice', voice.id)
-                break
-
-        os.makedirs("static/audio", exist_ok=True)
-
-    def speak(self, text, filename=None):
-        if not filename:
-            filename = f"{uuid4().hex}.mp3"
-        filepath = os.path.join("static/audio", filename)
-
-        self.engine.save_to_file(text, filepath)
-        self.engine.runAndWait()
-
-        return filename  # Вернём имя файла, чтобы отдать фронту ссылку
Index: social_network/VoiceAssistant/utils/downloader.py
===================================================================
diff --git a/social_network/VoiceAssistant/utils/downloader.py b/social_network/VoiceAssistant/utils/downloader.py
deleted file mode 100644
--- a/social_network/VoiceAssistant/utils/downloader.py	(revision eaaa74dff3a2ab4f38d5213ee48e23f3f27ecba2)
+++ /dev/null	(revision eaaa74dff3a2ab4f38d5213ee48e23f3f27ecba2)
@@ -1,54 +0,0 @@
-import os
-import requests
-import zipfile
-import sys
-
-DROPBOX_URL = (
-    "https://www.dropbox.com/scl/fi/m6ff4lir5wnw054mnx8df/"
-    "vosk-model-ru-0.22.zip?rlkey=zrfnc9hvb433sa75jdnyxyw7z&dl=1"
-)
-
-
-def download_model(model_dir="models/model", zip_name="model.zip"):
-    """
-    Скачивает и распаковывает модель Vosk из Dropbox.
-    Если модель уже загружена, не делает ничего.
-
-    :param model_dir: директория для распакованной модели
-    :param zip_name: имя временного zip-файла
-    """
-    if os.path.exists(model_dir) and os.path.isdir(model_dir):
-        print(f"[INFO] Модель уже существует в {model_dir}")
-        return
-
-    os.makedirs(os.path.dirname(model_dir), exist_ok=True)
-    print(f"[INFO] Загружаем модель Vosk из Dropbox в {zip_name}...")
-
-    try:
-        with requests.get(DROPBOX_URL, stream=True) as r:
-            r.raise_for_status()
-            total = int(r.headers.get('content-length', 0))
-            with open(zip_name, 'wb') as f:
-                downloaded = 0
-                for chunk in r.iter_content(chunk_size=8192):
-                    if chunk:
-                        f.write(chunk)
-                        downloaded += len(chunk)
-                        done = int(50 * downloaded / total) if total else 0
-                        sys.stdout.write(f"\r[{'=' * done}{' ' * (50-done)}] {downloaded / (1024**2):.2f}MB/{total/(1024**2):.2f}MB")
-                        sys.stdout.flush()
-        print("\n[INFO] Загрузка завершена.")
-
-        print(f"[INFO] Распаковываем {zip_name} в {model_dir}...")
-        with zipfile.ZipFile(zip_name, 'r') as zip_ref:
-            zip_ref.extractall(os.path.dirname(model_dir))
-        os.remove(zip_name)
-        print(f"[INFO] Модель распакована в {model_dir}")
-
-    except Exception as e:
-        print(f"[ERROR] Не удалось скачать или распаковать модель: {e}")
-        sys.exit(1)
-
-
-if __name__ == '__main__':
-    download_model()
Index: migrations/README
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/migrations/README b/migrations/README
deleted file mode 100644
--- a/migrations/README	(revision eaaa74dff3a2ab4f38d5213ee48e23f3f27ecba2)
+++ /dev/null	(revision eaaa74dff3a2ab4f38d5213ee48e23f3f27ecba2)
@@ -1,1 +0,0 @@
-Single-database configuration for Flask.
Index: social_network/VoiceAssistant/utils/recognizer.py
===================================================================
diff --git a/social_network/VoiceAssistant/utils/recognizer.py b/social_network/VoiceAssistant/utils/recognizer.py
deleted file mode 100644
--- a/social_network/VoiceAssistant/utils/recognizer.py	(revision eaaa74dff3a2ab4f38d5213ee48e23f3f27ecba2)
+++ /dev/null	(revision eaaa74dff3a2ab4f38d5213ee48e23f3f27ecba2)
@@ -1,42 +0,0 @@
-import os
-import json
-import pyaudio
-import numpy as np
-import noisereduce as nr
-from vosk import Model, KaldiRecognizer
-
-class SpeechRecognizer:
-    def __init__(self, model_path="models/model"):
-        if not os.path.exists(model_path):
-            raise FileNotFoundError(f"Модель не найдена по пути: {model_path}")
-        self.model = Model(model_path)
-        self.recognizer = KaldiRecognizer(self.model, 16000)
-        self.audio = pyaudio.PyAudio()
-        self.stream = self.audio.open(format=pyaudio.paInt16,
-                                      channels=1,
-                                      rate=16000,
-                                      input=True,
-                                      frames_per_buffer=4096)
-        self.stream.start_stream()
-
-    def recognize_once(self):
-        print("[INFO] Прослушивание...")
-        frames = []
-
-        while True:
-            data = self.stream.read(4096, exception_on_overflow=False)
-            frames.append(data)
-            if self.recognizer.AcceptWaveform(data):
-                break
-
-        print("[INFO] Обработка и фильтрация шума...")
-        # Преобразуем в массив для обработки
-        audio_data = np.frombuffer(b''.join(frames), dtype=np.int16)
-        reduced_noise = nr.reduce_noise(y=audio_data, sr=16000)
-        reduced_bytes = reduced_noise.astype(np.int16).tobytes()
-
-        # Распознаем финально
-        self.recognizer = KaldiRecognizer(self.model, 16000)
-        self.recognizer.AcceptWaveform(reduced_bytes)
-        result = json.loads(self.recognizer.Result())
-        return result.get("text", "")
Index: social_network/VoiceAssistant/templates/assistant.html
===================================================================
diff --git a/social_network/VoiceAssistant/templates/assistant.html b/social_network/VoiceAssistant/templates/assistant.html
deleted file mode 100644
--- a/social_network/VoiceAssistant/templates/assistant.html	(revision eaaa74dff3a2ab4f38d5213ee48e23f3f27ecba2)
+++ /dev/null	(revision eaaa74dff3a2ab4f38d5213ee48e23f3f27ecba2)
@@ -1,41 +0,0 @@
-<!DOCTYPE html>
-<html lang="ru">
-<head>
-  <meta charset="UTF-8">
-  <title>Study Assistant</title>
-  <link rel="stylesheet" href="/static/style.css">
-</head>
-<body>
-  <div id="chat-window">
-    <div id="chat-log"></div>
-    <button id="activate-btn">🎤 Говорить</button>
-  </div>
-
-  <script>
-    document.getElementById("activate-btn").onclick = async () => {
-      const btn = document.getElementById("activate-btn");
-      btn.disabled = true;
-      btn.textContent = "🎤 Обработка...";
-
-      const res = await fetch("/listen", { method: "POST" });
-      const data = await res.json();
-
-      const log = document.getElementById("chat-log");
-      data.history.forEach(entry => {
-        const div = document.createElement("div");
-        div.className = entry.role;
-        div.textContent = `${entry.role === 'user' ? 'Вы' : 'Study'}: ${entry.message}`;
-        log.appendChild(div);
-      });
-
-      if (data.audio) {
-        const audio = new Audio(data.audio);
-        audio.play();
-      }
-
-      btn.textContent = "🎤 Говорить";
-      btn.disabled = false;
-    }
-  </script>
-</body>
-</html>
Index: migrations/env.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/migrations/env.py b/migrations/env.py
deleted file mode 100644
--- a/migrations/env.py	(revision eaaa74dff3a2ab4f38d5213ee48e23f3f27ecba2)
+++ /dev/null	(revision eaaa74dff3a2ab4f38d5213ee48e23f3f27ecba2)
@@ -1,113 +0,0 @@
-import logging
-from logging.config import fileConfig
-
-from flask import current_app
-
-from alembic import context
-
-# this is the Alembic Config object, which provides
-# access to the values within the .ini file in use.
-config = context.config
-
-# Interpret the config file for Python logging.
-# This line sets up loggers basically.
-fileConfig(config.config_file_name)
-logger = logging.getLogger('alembic.env')
-
-
-def get_engine():
-    try:
-        # this works with Flask-SQLAlchemy<3 and Alchemical
-        return current_app.extensions['migrate'].db.get_engine()
-    except (TypeError, AttributeError):
-        # this works with Flask-SQLAlchemy>=3
-        return current_app.extensions['migrate'].db.engine
-
-
-def get_engine_url():
-    try:
-        return get_engine().url.render_as_string(hide_password=False).replace(
-            '%', '%%')
-    except AttributeError:
-        return str(get_engine().url).replace('%', '%%')
-
-
-# add your model's MetaData object here
-# for 'autogenerate' support
-# from myapp import mymodel
-# target_metadata = mymodel.Base.metadata
-config.set_main_option('sqlalchemy.url', get_engine_url())
-target_db = current_app.extensions['migrate'].db
-
-# other values from the config, defined by the needs of env.py,
-# can be acquired:
-# my_important_option = config.get_main_option("my_important_option")
-# ... etc.
-
-
-def get_metadata():
-    if hasattr(target_db, 'metadatas'):
-        return target_db.metadatas[None]
-    return target_db.metadata
-
-
-def run_migrations_offline():
-    """Run migrations in 'offline' mode.
-
-    This configures the context with just a URL
-    and not an Engine, though an Engine is acceptable
-    here as well.  By skipping the Engine creation
-    we don't even need a DBAPI to be available.
-
-    Calls to context.execute() here emit the given string to the
-    script output.
-
-    """
-    url = config.get_main_option("sqlalchemy.url")
-    context.configure(
-        url=url, target_metadata=get_metadata(), literal_binds=True
-    )
-
-    with context.begin_transaction():
-        context.run_migrations()
-
-
-def run_migrations_online():
-    """Run migrations in 'online' mode.
-
-    In this scenario we need to create an Engine
-    and associate a connection with the context.
-
-    """
-
-    # this callback is used to prevent an auto-migration from being generated
-    # when there are no changes to the schema
-    # reference: http://alembic.zzzcomputing.com/en/latest/cookbook.html
-    def process_revision_directives(context, revision, directives):
-        if getattr(config.cmd_opts, 'autogenerate', False):
-            script = directives[0]
-            if script.upgrade_ops.is_empty():
-                directives[:] = []
-                logger.info('No changes in schema detected.')
-
-    conf_args = current_app.extensions['migrate'].configure_args
-    if conf_args.get("process_revision_directives") is None:
-        conf_args["process_revision_directives"] = process_revision_directives
-
-    connectable = get_engine()
-
-    with connectable.connect() as connection:
-        context.configure(
-            connection=connection,
-            target_metadata=get_metadata(),
-            **conf_args
-        )
-
-        with context.begin_transaction():
-            context.run_migrations()
-
-
-if context.is_offline_mode():
-    run_migrations_offline()
-else:
-    run_migrations_online()
Index: social_network/VoiceAssistant/core/assistant.py
===================================================================
diff --git a/social_network/VoiceAssistant/core/assistant.py b/social_network/VoiceAssistant/core/assistant.py
deleted file mode 100644
--- a/social_network/VoiceAssistant/core/assistant.py	(revision eaaa74dff3a2ab4f38d5213ee48e23f3f27ecba2)
+++ /dev/null	(revision eaaa74dff3a2ab4f38d5213ee48e23f3f27ecba2)
@@ -1,31 +0,0 @@
-from utils.recognizer import SpeechRecognizer
-from utils.commands import CommandProcessor
-from utils.tts import TextToSpeech
-from utils.history import SessionHistory
-
-class AssistantCore:
-    def __init__(self):
-        self.recognizer = SpeechRecognizer()
-        self.commands = CommandProcessor()
-        self.tts = TextToSpeech()
-        self.history = SessionHistory()
-
-    def listen_and_respond(self):
-        query = self.recognizer.recognize_once()
-        if not query:
-            return None, None
-
-        print(f"[USER]: {query}")
-        self.history.add_message("user", query)
-
-        response = self.commands.process(query)
-        self.history.add_message("assistant", response)
-
-        audio_filename = self.tts.speak(response)
-        return response, audio_filename
-
-    def get_history(self):
-        return self.history.get_history()
-
-    def reset_history(self):
-        self.history.clear()
Index: social_network/VoiceAssistant/utils/ai.py
===================================================================
diff --git a/social_network/VoiceAssistant/utils/ai.py b/social_network/VoiceAssistant/utils/ai.py
deleted file mode 100644
--- a/social_network/VoiceAssistant/utils/ai.py	(revision eaaa74dff3a2ab4f38d5213ee48e23f3f27ecba2)
+++ /dev/null	(revision eaaa74dff3a2ab4f38d5213ee48e23f3f27ecba2)
@@ -1,52 +0,0 @@
-# utils/ai.py
-import requests
-from typing import Optional
-
-class AIResponder:
-    """
-    Класс для взаимодействия с AI-сервисом вашего приложения.
-    Отправляет запросы на Flask-эндпоинт и возвращает текстовые ответы.
-    """
-    def __init__(self,
-                 base_url: str = "http://localhost:5000/ai-chat/ai-chat",
-                 default_model: str = "ChatGLM",
-                 timeout: int = 120):
-        self.base_url = base_url.rstrip('/')
-        self.default_model = default_model
-        self.timeout = timeout
-
-    def get_response(self,
-                     prompt: str,
-                     model: Optional[str] = None,
-                     enhanced: bool = False) -> str:
-        """
-        Отправляет запрос в AI-сервис и возвращает текстовый ответ.
-
-        :param prompt: Текст запроса пользователя.
-        :param model: Имя модели из text_providers (ChatGLM, Free2GPT, GizAI).
-        :param enhanced: Если True, используется расширенная генерация через EnhancedGeneration.
-        :return: Ответ AI в формате строки.
-        """
-        url = self.base_url
-        payload = {
-            "message": prompt,
-            "model": model or self.default_model,
-            "type": "text",
-            "enhanced": enhanced
-        }
-        try:
-            resp = requests.post(url, json=payload, timeout=self.timeout)
-            resp.raise_for_status()
-            data = resp.json()
-
-            if not data.get("success", True):
-                return f"(ИИ ошибка): {data.get('message', 'Неизвестная ошибка')}"
-
-            # В некоторых реализациях ответ может быть в поле 'response'
-            response = data.get("response")
-            if response is None:
-                return "(ИИ): получен пустой ответ"
-            return response
-
-        except requests.exceptions.RequestException as e:
-            return f"(Сетевая ошибка ИИ): {str(e)}"
Index: migrations/alembic.ini
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/migrations/alembic.ini b/migrations/alembic.ini
deleted file mode 100644
--- a/migrations/alembic.ini	(revision eaaa74dff3a2ab4f38d5213ee48e23f3f27ecba2)
+++ /dev/null	(revision eaaa74dff3a2ab4f38d5213ee48e23f3f27ecba2)
@@ -1,50 +0,0 @@
-# A generic, single database configuration.
-
-[alembic]
-# template used to generate migration files
-# file_template = %%(rev)s_%%(slug)s
-
-# set to 'true' to run the environment during
-# the 'revision' command, regardless of autogenerate
-# revision_environment = false
-
-
-# Logging configuration
-[loggers]
-keys = root,sqlalchemy,alembic,flask_migrate
-
-[handlers]
-keys = console
-
-[formatters]
-keys = generic
-
-[logger_root]
-level = WARN
-handlers = console
-qualname =
-
-[logger_sqlalchemy]
-level = WARN
-handlers =
-qualname = sqlalchemy.engine
-
-[logger_alembic]
-level = INFO
-handlers =
-qualname = alembic
-
-[logger_flask_migrate]
-level = INFO
-handlers =
-qualname = flask_migrate
-
-[handler_console]
-class = StreamHandler
-args = (sys.stderr,)
-level = NOTSET
-formatter = generic
-
-[formatter_generic]
-format = %(levelname)-5.5s [%(name)s] %(message)s
-datefmt = %H:%M:%S
Index: social_network/tests/conftest.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/social_network/tests/conftest.py b/social_network/tests/conftest.py
new file mode 100644
--- /dev/null	(date 1747754056262)
+++ b/social_network/tests/conftest.py	(date 1747754056262)
@@ -0,0 +1,86 @@
+import logging
+import os
+import tempfile
+import uuid
+import pytest
+from social_network.app import create_app
+from social_network.app.forms import EditProfileForm
+from social_network.app.models import db, User, Courses
+
+unique_email = f"test-{uuid.uuid4()}@example.com"
+
+@pytest.fixture
+def app():
+    temp_dir = tempfile.mkdtemp()
+    test_db_path = os.path.join(temp_dir, "test.db")
+
+    app = create_app(conf='social_network.tests.config')
+    app.config.update({
+        "TESTING": True,
+        "WTF_CSRF_ENABLED": False,
+        "SQLALCHEMY_DATABASE_URI": f"sqlite:///{test_db_path}",
+        "SERVER_NAME": "localhost",
+    })
+
+    with app.app_context():
+        db.create_all()
+        yield app
+        db.session.rollback()
+        db.drop_all()
+
+    if os.path.exists(test_db_path):
+        os.remove(test_db_path)
+    os.rmdir(temp_dir)
+
+
+@pytest.fixture
+def client(app):
+    return app.test_client()
+
+
+@pytest.fixture
+def runner(app):
+    return app.test_cli_runner()
+
+@pytest.fixture
+def form():
+    """Создает экземпляр формы для тестирования."""
+    return EditProfileForm()
+
+
+@pytest.fixture
+def new_user(app):
+    """Создание пользователя для тестов"""
+    user = User(
+        username="test",
+        email='testussrr@mail.com',
+        first_name="Test",
+        last_name="User",
+        age=25,
+    )
+    user.set_password("password123")
+    with app.app_context():
+        db.session.expire_on_commit = False
+        db.session.add(user)
+        db.session.commit()
+
+        yield db.session.get(User, user.id)
+
+
+@pytest.fixture
+def new_course(app):
+    """Создание курса для тестов"""
+    course = Courses(
+        course_name="Python Basics",
+        difficulty=1,
+        title="Introduction to Python",
+        description="Learn the basics of Python programming.",
+        input_example="print('Hello, world!')",
+        output_example="Hello, world!"
+    )
+    with app.app_context():
+        db.session.expire_on_commit = False
+        db.session.add(course)
+        db.session.commit()
+
+        yield db.session.get(Courses, course.id)
\ No newline at end of file
Index: social_network/app/routes.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from os import abort\nimport sqlalchemy as sa\nfrom flask import Blueprint, request, redirect, url_for, jsonify, flash, render_template, current_app, Flask\nfrom flask_login import login_required, current_user, login_user, logout_user\nfrom flask_wtf import form\nfrom social_network.app import db, login_manager\nfrom social_network.app.ai_chat import handle_ai_chat\nfrom social_network.app.forms import LoginForm, RegistrationForm, EditProfileForm\nfrom social_network.app.models import User\nfrom social_network.app.tasks_data import TASKS\nfrom .sendemail import send_email\nfrom flask import Blueprint, render_template\n\n@login_manager.user_loader\ndef load_user(user_id):\n    return User.query.get(int(user_id))\n\n\nmain_bp = Blueprint('main', __name__)\n\n@main_bp.route('/login', methods=['GET', 'POST'])\ndef login():\n    form = LoginForm()\n    if form.validate_on_submit():\n        print(form)\n        user = db.session.scalar(\n            sa.select(User).where(User.username == form.username.data)\n        )\n        print(\"=================================\")\n        print(user)\n        print(\"=================================\")\n        if user is None or not user.check_password(form.password.data):\n            flash('Invalid username or password')\n            return redirect(url_for('login'))\n        login_user(user, remember=form.remember_me.data)\n        return redirect(url_for('main.account'))\n    return render_template('login.html', title='Sign In', form=form)\n\n\n@main_bp.route('/register', methods=['GET'])\ndef register():\n    form = RegistrationForm()\n    if form.validate_on_submit():\n        existing_user = User.query.filter_by(email=form.email.data).first()\n        if existing_user:\n            flash('Email already registered.', 'danger')\n            return redirect(url_for('register'))\n\n    return render_template('register.html', form=form)\n\n@main_bp.route('/register', methods=['POST'])\ndef add_user():\n    # print(request.get_data())\n    data = request.form\n    print(\"================================================\")\n    print(\"================================================\")\n    print(data)\n    print(\"================================================\")\n    print(\"================================================\")\n    new_user = User()\n    new_user.username = data.get('username')\n    new_user.email = data.get('email')\n    new_user.set_password(data.get('password'))\n\n\n    try:\n        db.session.add(new_user)\n        db.session.commit()\n\n        send_email(\n            app=current_app,\n            to=new_user.email,\n            subject=\"Добро пожаловать!\",\n            template=\"Привет, {username}! Спасибо за регистрацию на нашем сайте. Надеемся, что учеба с нами будет интересным и легким приключением.\",\n            username=new_user.username,\n        )\n        print('письмо отправлено')\n\n        return redirect(url_for('main.login'))\n    except Exception as e:\n        db.session.rollback()\n        return jsonify({'error': str(e)}), 500\n\n@main_bp.route('/')\ndef index():\n    return redirect(url_for('main.landing'))\n\n@main_bp.route('/landing')\ndef landing():\n    return render_template('landing.html')\n\n@main_bp.route('/textbook')\ndef textbook():\n    return render_template('textbook.html')\n\n@main_bp.route('/tasks')\ndef show_tasks():\n    return render_template('tasks.html', tasks=TASKS)\n\n@main_bp.route('/tasks/<int:task_id>')\ndef task_view(task_id):\n    # ищем задачу во всех уровнях сложности\n    for lvl in TASKS.values():\n        for t in lvl:\n            if t['id'] == task_id:\n                return render_template('task_view.html', task=t)\n\n@main_bp.route('/support', methods=['GET'])\ndef support():\n    return render_template('support.html')\n\nquizzes_bp = Blueprint('quizzes_bp', __name__)\n@quizzes_bp.route('/choose')\ndef choose():\n    return render_template('quiz.html')\n\n@main_bp.route('/execute-code', methods=['POST'])\ndef execute_code():\n    code = request.json.get('code')\n    try:\n        local_dict = {}\n        exec(code, {\"__builtins__\": __builtins__}, local_dict)\n        output = local_dict.get('result', 'Код выполнен успешно')\n        return jsonify({'success': True, 'output': output})\n    except Exception as e:\n        return jsonify({'success': False, 'error': str(e)})\n\n@main_bp.route('/user-agreement', methods=['GET'])\ndef user_agreement():\n    return render_template('user_agreement.html')\n\nai_chat_bp = Blueprint('ai_chat', __name__)\n\n\n@ai_chat_bp.route('/ai_chat', methods=['GET', 'POST'])\ndef ai_chat():\n    if request.method == 'POST':\n        return handle_ai_chat(request)\n    return render_template('ai_chat.html')\n\n\n@main_bp.route('/account', methods=['GET', 'POST'])\n@login_required\ndef account():\n    print(current_user)\n    form = EditProfileForm(obj=current_user)\n\n    if form.validate_on_submit():\n        current_user.username = form.username.data\n        current_user.email = form.email.data\n        current_user.first_name = form.first_name.data or None\n        current_user.last_name = form.last_name.data or None\n        current_user.age = form.age.data or None\n\n        db.session.commit()\n\n    return render_template('account.html', form=form, user=current_user)\n\n\n@main_bp.route('/logout')\ndef logout():\n    logout_user()\n    return redirect(url_for('main.index'))\n\n\n@main_bp.route('/my-courses')\ndef my_courses():\n    return render_template('courses.html', form=form)
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/social_network/app/routes.py b/social_network/app/routes.py
--- a/social_network/app/routes.py	(revision eaaa74dff3a2ab4f38d5213ee48e23f3f27ecba2)
+++ b/social_network/app/routes.py	(date 1747754056262)
@@ -1,6 +1,5 @@
-from os import abort
 import sqlalchemy as sa
-from flask import Blueprint, request, redirect, url_for, jsonify, flash, render_template, current_app, Flask
+from flask import request, redirect, url_for, jsonify, flash, render_template, current_app, Blueprint, render_template
 from flask_login import login_required, current_user, login_user, logout_user
 from flask_wtf import form
 from social_network.app import db, login_manager
@@ -9,7 +8,7 @@
 from social_network.app.models import User
 from social_network.app.tasks_data import TASKS
 from .sendemail import send_email
-from flask import Blueprint, render_template
+
 
 @login_manager.user_loader
 def load_user(user_id):
@@ -18,20 +17,18 @@
 
 main_bp = Blueprint('main', __name__)
 
+
 @main_bp.route('/login', methods=['GET', 'POST'])
 def login():
     form = LoginForm()
     if form.validate_on_submit():
-        print(form)
         user = db.session.scalar(
             sa.select(User).where(User.username == form.username.data)
         )
-        print("=================================")
         print(user)
-        print("=================================")
         if user is None or not user.check_password(form.password.data):
             flash('Invalid username or password')
-            return redirect(url_for('login'))
+            return redirect(url_for('main.login'))
         login_user(user, remember=form.remember_me.data)
         return redirect(url_for('main.account'))
     return render_template('login.html', title='Sign In', form=form)
@@ -48,6 +45,7 @@
 
     return render_template('register.html', form=form)
 
+
 @main_bp.route('/register', methods=['POST'])
 def add_user():
     # print(request.get_data())
@@ -81,22 +79,27 @@
         db.session.rollback()
         return jsonify({'error': str(e)}), 500
 
+
 @main_bp.route('/')
 def index():
     return redirect(url_for('main.landing'))
 
+
 @main_bp.route('/landing')
 def landing():
     return render_template('landing.html')
 
+
 @main_bp.route('/textbook')
 def textbook():
     return render_template('textbook.html')
 
+
 @main_bp.route('/tasks')
 def show_tasks():
     return render_template('tasks.html', tasks=TASKS)
 
+
 @main_bp.route('/tasks/<int:task_id>')
 def task_view(task_id):
     # ищем задачу во всех уровнях сложности
@@ -105,15 +108,20 @@
             if t['id'] == task_id:
                 return render_template('task_view.html', task=t)
 
+
 @main_bp.route('/support', methods=['GET'])
 def support():
     return render_template('support.html')
 
+
 quizzes_bp = Blueprint('quizzes_bp', __name__)
+
+
 @quizzes_bp.route('/choose')
 def choose():
     return render_template('quiz.html')
 
+
 @main_bp.route('/execute-code', methods=['POST'])
 def execute_code():
     code = request.json.get('code')
@@ -125,10 +133,12 @@
     except Exception as e:
         return jsonify({'success': False, 'error': str(e)})
 
+
 @main_bp.route('/user-agreement', methods=['GET'])
 def user_agreement():
     return render_template('user_agreement.html')
 
+
 ai_chat_bp = Blueprint('ai_chat', __name__)
 
 
@@ -160,7 +170,7 @@
 @main_bp.route('/logout')
 def logout():
     logout_user()
-    return redirect(url_for('main.index'))
+    return redirect(url_for('main.login'))
 
 
 @main_bp.route('/my-courses')
Index: social_network/tests/config.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/social_network/tests/config.py b/social_network/tests/config.py
new file mode 100644
--- /dev/null	(date 1747754056262)
+++ b/social_network/tests/config.py	(date 1747754056262)
@@ -0,0 +1,18 @@
+import os
+from social_network.app.secret_config import secret_password
+
+
+BASE_DIR = os.path.abspath(os.path.dirname(__file__))
+SECRET_KEY = os.urandom(24)
+SQLALCHEMY_DATABASE_URI = f'sqlite:///{os.path.join(BASE_DIR, "app_test.db")}'
+SQLALCHEMY_TRACK_MODIFICATIONS = False
+DEBUG = True
+
+
+MAIL_SERVER = 'smtp.gmail.com'
+MAIL_PORT = 587
+MAIL_USE_TLS = True
+MAIL_USE_SSL = False
+MAIL_USERNAME = 'studysphereru@gmail.com'
+MAIL_PASSWORD = secret_password
+MAIL_DEFAULT_SENDER = 'Команда Study Sphere'
\ No newline at end of file
Index: social_network/VoiceAssistant/frontend.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/social_network/VoiceAssistant/frontend.js b/social_network/tests/test_forms.py
rename from social_network/VoiceAssistant/frontend.js
rename to social_network/tests/test_forms.py
--- a/social_network/VoiceAssistant/frontend.js	(revision eaaa74dff3a2ab4f38d5213ee48e23f3f27ecba2)
+++ b/social_network/tests/test_forms.py	(date 1747754056262)
@@ -1,0 +1,100 @@
+import pytest
+from social_network.app.forms import LoginForm, RegistrationForm, EditProfileForm
+
+
+@pytest.mark.usefixtures("app")
+def test_login_form_valid(app):
+    """Тест валидации входа"""
+    with app.app_context():
+        form = LoginForm(username="testuser", password="password123")
+    assert form.validate() is True
+
+
+@pytest.mark.usefixtures("app")
+def test_registration_form_valid(app):
+    """Тест валидации регистрации"""
+    form = RegistrationForm(
+        username="newuser",
+        email="newuser@example.com",
+        password="password123",
+    )
+    assert form.validate() is True
+
+
+@pytest.mark.usefixtures("app")
+def test_registration_form_invalid_password(app):
+    """Тест невалидной регистрации"""
+    form = RegistrationForm(
+        username="newuser",
+        email="newuser@example.com",
+        password="pas",
+    )
+    assert form.validate() is False
+
+
+@pytest.mark.usefixtures("app")
+def test_registration_form_invalid_email(app):
+    """Тест невалидной регистрации"""
+    form = RegistrationForm(
+        username="newuser",
+        email="newuserexample.com",
+        password="password",
+    )
+    assert form.validate() is False
+
+
+@pytest.mark.usefixtures("app")
+def test_registration_form_user_is_already_registered(app):
+    """Тестирование невалидной формы регистрации."""
+    form = RegistrationForm(
+        username="User",
+        email="newusere@xample.com",
+        password="pas",
+    )
+    assert form.validate() is False
+
+
+def test_valid_form(form):
+    """Тестирование корректного заполнения формы."""
+    form.username.data = "testuser"
+    form.email.data = "test@example.com"
+    form.first_name.data = "Test"
+    form.last_name.data = "User"
+    form.age.data = "25"
+
+    assert form.validate() is True
+    assert form.username.errors == []
+    assert form.email.errors == []
+
+
+def test_missing_required_fields(form):
+    """Тестирование формы с отсутствующими обязательными полями."""
+    form.username.data = ""
+    form.email.data = ""
+
+    assert form.validate() is False
+    assert "This field is required." in form.username.errors
+    assert "This field is required." in form.email.errors
+
+
+def test_invalid_email(form):
+    """Тестирование формы с некорректным email."""
+    form.username.data = "testuser"
+    form.email.data = "invalid-email"
+
+    assert form.validate() is False
+    assert "Invalid email address." in form.email.errors
+
+
+def test_optional_fields(form):
+    """Тестирование формы с необязательными полями."""
+    form.username.data = "testuser"
+    form.email.data = "test@example.com"
+    form.first_name.data = ""
+    form.last_name.data = ""
+    form.age.data = ""
+
+    assert form.validate() is True
+    assert form.first_name.errors == []
+    assert form.last_name.errors == []
+    assert form.age.errors == []
\ No newline at end of file
Index: social_network/tests/test_models.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/social_network/tests/test_models.py b/social_network/tests/test_models.py
new file mode 100644
--- /dev/null	(date 1747754056263)
+++ b/social_network/tests/test_models.py	(date 1747754056263)
@@ -0,0 +1,31 @@
+import uuid
+
+from sqlalchemy.testing import db
+
+from social_network.app.models import Courses
+from social_network.tests.conftest import unique_email
+
+
+def test_user_creation(new_user):
+    """Тестирование создания пользователя."""
+    assert new_user.username == "test"
+    assert new_user.email == 'testussrr@mail.com'
+    assert new_user.first_name == "Test"
+    assert new_user.last_name == "User"
+    assert new_user.age == 25
+
+
+def test_set_password(new_user):
+    """Тестирование метода set_password."""
+    assert new_user.check_password("password123") is True
+    assert new_user.check_password("wrongpassword") is False
+
+
+def test_course_creation(new_course):
+    """Тестирование создания курса."""
+    assert new_course.course_name == "Python Basics"
+    assert new_course.difficulty == 1
+    assert new_course.title == "Introduction to Python"
+    assert new_course.description == "Learn the basics of Python programming."
+    assert new_course.input_example == "print('Hello, world!')"
+    assert new_course.output_example == "Hello, world!"
\ No newline at end of file
Index: social_network/tests/test_routes.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/social_network/tests/test_routes.py b/social_network/tests/test_routes.py
new file mode 100644
--- /dev/null	(date 1747754056263)
+++ b/social_network/tests/test_routes.py	(date 1747754056263)
@@ -0,0 +1,74 @@
+from flask import url_for
+from social_network.app.models import User
+
+
+def test_home_page(client):
+    """Тест для главной страницы"""
+    response = client.get('/')
+    assert response.status_code == 302
+
+
+def test_landing_page(client):
+    """Тест для landing"""
+    response = client.get('/landing')
+    assert response.status_code == 200
+    print(response.data)
+    assert b"Welcome" in response.data
+
+
+def test_login_page(client):
+    """Тест для страницы логина"""
+    response = client.get('/login')
+    assert response.status_code == 200
+    assert b"Sign In" in response.data
+
+
+def test_register_page(client):
+    """Тест для страницы регистрации"""
+    response = client.get('/register')
+    assert response.status_code == 200
+    assert b"Register" in response.data
+
+
+def test_register_user(client):
+    """Тест регистрации нового пользователя"""
+    response = client.post('/register', data={
+        'username': 'test user x',
+        'email': 'testuserx@example.com',
+        'password': 'password123',
+    }, follow_redirects=True)
+    assert response.status_code == 200
+    print(response.data)
+    assert b"Sign In" in response.data
+
+
+def test_login_user(client, new_user):
+    """Тест входа пользователя"""
+    response = client.post(
+        url_for("main.login"),
+        content_type='multipart/form-data',
+        data={
+            'username': 'test',
+            'password': 'password123'
+        },
+        follow_redirects=True
+    )
+
+    print(response.data)
+    assert response.status_code == 200
+
+    assert b"Account" in response.data
+
+
+def test_logout_user(client, new_user):
+    """Тест выхода пользователя"""
+    response = client.post(url_for('main.login'), data={
+        'username': 'test',
+        'password': 'password123'
+    }, follow_redirects=True)
+
+    assert response.status_code == 200
+    assert b'Account' in response.data
+
+    response = client.get(url_for('main.logout'), follow_redirects=True)
+    assert response.status_code == 200
\ No newline at end of file
Index: social_network/app/models.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from flask_login import UserMixin\nfrom werkzeug.security import generate_password_hash, check_password_hash\nfrom social_network.app import db\n\n\nclass User(UserMixin, db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    username = db.Column(db.String(64), unique=False, nullable=False)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    password_hash = db.Column(db.String(128))\n    messages = db.relationship('Message', backref='author', lazy='dynamic')\n    first_name = db.Column(db.String(80), nullable=True)\n    last_name = db.Column(db.String(80), nullable=True)\n    age = db.Column(db.Integer, nullable=True)\n\n    def set_password(self, password):\n        self.password_hash = generate_password_hash(password)\n\n    def check_password(self, password):\n        return check_password_hash(self.password_hash, password)\n\n\nclass Message(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    content = db.Column(db.String(500), nullable=False)\n    user_id = db.Column(db.Integer, db.ForeignKey('user.id'), nullable=False)\n\nclass Courses(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    course_name = db.Column(db.String(200), default=\"_\")\n    difficulty = db.Column(db.Integer, nullable=False)\n    title = db.Column(db.String(80), nullable=False)\n    description = db.Column(db.Text, nullable=False)\n    input_example = db.Column(db.Text, nullable=False)\n    output_example = db.Column(db.Text, nullable=False)\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/social_network/app/models.py b/social_network/app/models.py
--- a/social_network/app/models.py	(revision eaaa74dff3a2ab4f38d5213ee48e23f3f27ecba2)
+++ b/social_network/app/models.py	(date 1747754056262)
@@ -25,6 +25,7 @@
     content = db.Column(db.String(500), nullable=False)
     user_id = db.Column(db.Integer, db.ForeignKey('user.id'), nullable=False)
 
+
 class Courses(db.Model):
     id = db.Column(db.Integer, primary_key=True)
     course_name = db.Column(db.String(200), default="_")
Index: social_network/app/app.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import traceback\nfrom social_network.app import create_app\nfrom social_network.app.instance.config import BASE_DIR\nfrom social_network.app.quizzes import quizzes_bp\n\napp = create_app()\napp.app_context().push()\napp.register_blueprint(quizzes_bp)\n\nprint(app.url_map)\nprint(traceback.format_exc())\n# print(\"Database URI:\", app.config['SQLALCHEMY_DATABASE_URI'])\n# print(\"BASE_DIR:\", BASE_DIR)\n\nif __name__ == '__main__':\n    app.run(debug=True)
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/social_network/app/app.py b/social_network/app/app.py
--- a/social_network/app/app.py	(revision eaaa74dff3a2ab4f38d5213ee48e23f3f27ecba2)
+++ b/social_network/app/app.py	(date 1747754056261)
@@ -1,6 +1,5 @@
 import traceback
 from social_network.app import create_app
-from social_network.app.instance.config import BASE_DIR
 from social_network.app.quizzes import quizzes_bp
 
 app = create_app()
@@ -9,8 +8,6 @@
 
 print(app.url_map)
 print(traceback.format_exc())
-# print("Database URI:", app.config['SQLALCHEMY_DATABASE_URI'])
-# print("BASE_DIR:", BASE_DIR)
 
 if __name__ == '__main__':
     app.run(debug=True)
\ No newline at end of file
Index: social_network/app/__init__.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from flask import Flask\nfrom flask_login import LoginManager\nfrom flask_mail import Mail\nfrom flask_sqlalchemy import SQLAlchemy\nfrom flask_migrate import Migrate\n\n\ndb = SQLAlchemy()\nlogin_manager = LoginManager()\nmigrate = Migrate()\nmail = Mail()\n\n\ndef create_app():\n    app = Flask(__name__)\n    app.config.from_object('social_network.app.instance.config')\n    db.init_app(app)\n    migrate.init_app(app, db)\n    login_manager.init_app(app)\n    mail.init_app(app)\n\n    from social_network.app.routes import main_bp\n    app.register_blueprint(main_bp)\n\n    from social_network.app.ai_chat_bp import ai_chat_bp\n    app.register_blueprint(ai_chat_bp, url_prefix='/ai-chat')\n\n    from social_network.app.script import import_tasks\n    app.register_blueprint(import_tasks)\n\n\n    return app
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/social_network/app/__init__.py b/social_network/app/__init__.py
--- a/social_network/app/__init__.py	(revision eaaa74dff3a2ab4f38d5213ee48e23f3f27ecba2)
+++ b/social_network/app/__init__.py	(date 1747754056261)
@@ -11,9 +11,9 @@
 mail = Mail()
 
 
-def create_app():
+def create_app(conf='social_network.app.instance.config'):
     app = Flask(__name__)
-    app.config.from_object('social_network.app.instance.config')
+    app.config.from_object(conf)
     db.init_app(app)
     migrate.init_app(app, db)
     login_manager.init_app(app)
Index: requirements.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>aiohappyeyeballs==2.6.1\naiohttp==3.11.16\naiosignal==1.3.2\nalembic==1.15.2\nattrs==25.3.0\nblinker==1.9.0\nblueprint==3.4.2\nBrotli==1.1.0\ncertifi==2025.1.31\ncharset-normalizer==3.4.1\nclick==8.1.8\nFlask==3.1.0\nFlask-Login==0.6.3\nFlask-Migrate==4.1.0\nFlask-SQLAlchemy==3.1.1\nFlask-WTF==1.2.2\nfrozenlist==1.5.0\ng4f==0.5.1.1\nidna==3.10\nitsdangerous==2.2.0\nJinja2==3.1.6\nMako==1.3.10\nMarkupSafe==3.0.2\nmultidict==6.4.3\nnest-asyncio==1.6.0\npropcache==0.3.1\npycryptodome==3.22.0\nrepoze.lru==0.7\nrequests==2.32.3\nRoutes==2.5.1\nsix==1.17.0\nSQLAlchemy==2.0.40\ntyping_extensions==4.13.2\nurllib3==2.4.0\nWerkzeug==3.1.3\nWTForms==3.2.1\nyarl==1.20.0\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/requirements.txt b/requirements.txt
--- a/requirements.txt	(revision eaaa74dff3a2ab4f38d5213ee48e23f3f27ecba2)
+++ b/requirements.txt	(date 1747754056261)
@@ -35,3 +35,4 @@
 Werkzeug==3.1.3
 WTForms==3.2.1
 yarl==1.20.0
+flask-testing==0.8.1
diff --git a/social_network/VoiceAssistant/__init__.py b/social_network/tests/__init__.py
rename from social_network/VoiceAssistant/__init__.py
rename to social_network/tests/__init__.py
